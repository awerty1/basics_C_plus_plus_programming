/*
Задание 2. Сформировать массив из N случайных целых чисел в диапазоне 
от -10 до 10 (число N вводится с клавиатуры, его значение не больше 20) и 
вывести элементы этого массива на экран. Вычислить следующие 
характеристики массива (вычисление каждой из них оформить как отдельную 
функцию, параметрами которой являются количество элементов массива и сам 
массив):
• количество минимальных элементов массива;
• логическое значение (true или false) – признак наличия хотя бы 
одного чётного элемента в массиве.
Выполнить следующую перестановку в массиве:
• поменять местами первый элемент со вторым, третий с четвёртым и 
т.д. Если в массиве нечётное количество элементов, то последний 
элемент оставить на своём месте – его не с чем переставлять.
Вывести преобразованный таким образом массив.
*/

#include <iostream>
#include <cstdlib>
#include <ctime>

// Функция для генерации случайных чисел в заданном диапазоне
int generateRandomNumber(int min, int max) 
{
    return min + rand() % (max - min + 1);
}

// Функция для вывода элементов массива на экран
void printArray(int arr[], int size) 
{
    for (int i = 0; i < size; i++) 
    {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

// Функция для подсчета количества минимальных элементов массива
int countMinElements(int arr[], int size) 
{
    int minElement = arr[0];
    int count = 0;

    for (int i = 1; i < size; i++) 
    {
        if (arr[i] < minElement) 
        {
            minElement = arr[i];
            count = 1;
        } 
        else if (arr[i] == minElement) 
        {
            count++;
        }
    }

    return count;
}

// Функция для проверки наличия хотя бы одного четного элемента в массиве
bool hasEvenElement(int arr[], int size) 
{
    for (int i = 0; i < size; i++) 
    {
        if (arr[i] % 2 == 0) 
        {
            return true;
        }
    }

    return false;
}

// Функция для выполнения перестановки в массиве
void performPermutation(int arr[], int size) 
{
    for (int i = 0; i < size - 1; i += 2) 
    {
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
}

int main() 
{
    // Инициализации генератора псевдослучайных чисел rand() с помощью текущего времени.
    // time(0) возвращает текущее время в секундах с начала Эпохи (1 января 1970 года). Функция time() определена в заголовочном файле <ctime>.
    //static_cast<unsigned int> выполняет явное приведение типа к unsigned int, чтобы корректно передать значение времени в функцию srand(). 
    //unsigned int используется потому, что srand() ожидает принимать значение типа unsigned int.
    srand(static_cast<unsigned int>(time(0)));

    int N;
    int arr[20];

    // Ввод количества элементов массива
    std::cout << "Введите количество элементов массива (не больше 20): ";
    std::cin >> N;

    // Заполнение массива случайными числами
    for (int i = 0; i < N; i++) 
    {
        arr[i] = generateRandomNumber(-10, 10);
    }

    // Вывод исходного массива
    std::cout << "Исходный массив:\n";
    printArray(arr, N);

    // Вычисление количества минимальных элементов массива
    int minCount = countMinElements(arr, N);
    std::cout << "Количество минимальных элементов: " << minCount << std::endl;

    // Проверка наличия четного элемента в массиве
    bool hasEven = hasEvenElement(arr, N);
    // Используем тернарный оператор (hasEven ? "true" : "false")
    std::cout << "Наличие четного элемента: " << (hasEven ? "true" : "false") << std::endl;

    // Выполнение перестановки в массиве
    performPermutation(arr, N);

    // Вывод преобразованного массива
    std::cout << "Преобразованный массив:\n";
    printArray(arr, N);

    return 0;
}