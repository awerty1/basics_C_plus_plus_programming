/*
–ó–∞–¥–∞–Ω–∏–µ 4. –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–æ–¥—è—Ç—Å—è x, y, x1, y1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ 
—Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x,y) –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: –∫–≤–∞–¥—Ä–∞—Ç
*/

#include <iostream>
#include <limits>

bool isValidInput(int& value, const std::string& message) 
{
    while (!(std::cin >> value)) 
    {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cout << "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! " << message;
    }
    
    return true;
}

bool isPointInShadedArea(int x, int y, int x1, int y1) 
{
    bool isInsideSquare = x >= 0 && x <= x1 && y >= 0 && y <= y1;
    bool isInsideTriangle = x >= 0 && y >= x1 && y <= y1;

    return isInsideSquare || isInsideTriangle;
}

int main() 
{
    int x, y, x1, y1;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (x): ";
    isValidInput(x, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è x: ");
    
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (y): ";
    isValidInput(y, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è y: ");

    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ—Ä–æ–Ω –∫–≤–∞–¥—Ä–∞—Ç–∞ (x1): ";
    isValidInput(x1, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è x1: ");
    
    std::cout << "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–æ—Ä–æ–Ω –∫–≤–∞–¥—Ä–∞—Ç–∞ (y1): ";
    isValidInput(y1, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è y1: ");

    if (isPointInShadedArea(x, y, x1, y1)) 
    {
        std::cout << "–¢–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏. üéØ" << std::endl;
    } 
    else 
    {
        std::cout << "–¢–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏. ‚ùå" << std::endl;
    }

    return 0;
}